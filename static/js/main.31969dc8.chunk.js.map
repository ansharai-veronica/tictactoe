{"version":3,"sources":["game/components/Board.js","utils/localStorageState.js","game/components/game-logic.js","game/components/Game.js","game/TicTacToe.js","App.js","serviceWorker.js","index.js"],"names":["Board","squares","onClick","renderSquare","i","className","useLocalStorageState","key","defaultValue","serialize","JSON","stringify","deserialize","parse","React","useState","valueInLocalStoarage","window","localStorage","getItem","state","setState","prevKeyRef","useRef","useEffect","prevKey","current","removeItem","setItem","useGameLogic","Array","fill","history","setHistory","currentStep","setCurrentStep","currentSquares","nextValue","xSquaresCount","filter","r","length","calculateNextValue","winner","lines","a","b","c","calculateWinner","status","every","Boolean","calculateStatus","moves","map","stepSquares","step","description","isCurrentStep","disabled","square","newHistory","splice","Game","selectSquare","restart","TicTacToe","props","style","display","justifyContent","App","StrictMode","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kRAEaA,G,YAAQ,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,QAE5B,SAASC,EAAaC,GAClB,OACI,4BAAQC,UAAU,SAASH,QAAS,kBAAKA,EAAQE,KAC5CH,EAAQG,IAKrB,OACI,6BACI,yBAAKC,UAAU,aACVF,EAAa,GACbA,EAAa,GACbA,EAAa,IAElB,yBAAKE,UAAU,aACVF,EAAa,GACbA,EAAa,GACbA,EAAa,IAElB,yBAAKE,UAAU,aACVF,EAAa,GACbA,EAAa,GACbA,EAAa,O,OCzBvB,SAASG,EAAsBC,GAEuD,IADxDC,EACuD,uDADzC,GACyC,yDAAH,GAAG,IAAtDC,iBAAsD,MAA3CC,KAAKC,UAAsC,MAA5BC,mBAA4B,MAAhBF,KAAKG,MAAW,IAE/DC,IAAMC,UAAS,WACpC,IAAMC,EAAuBC,OAAOC,aAAaC,QAAQZ,GAEzD,OAAGS,EACQJ,EAAYI,GAGS,oBAAjBR,EAA8BA,IAAiBA,KATsB,mBAEjFY,EAFiF,KAE3EC,EAF2E,KAYlFC,EAAaR,IAAMS,OAAOhB,GAahC,OAXAO,IAAMU,WAAU,WACR,IAAMC,EAAUH,EAAWI,QAC5BD,IAAYlB,GAEXU,OAAOC,aAAaS,WAAWF,GAGnCH,EAAWI,QAAUnB,EACrBU,OAAOC,aAAaU,QAAQrB,EAAKE,EAAUW,MAC7C,CAACb,EAAKa,EAAOX,IAER,CAACW,EAAOC,GCQZ,IAAMQ,EAAe,WAAM,IAAD,EACCvB,EAAqB,sBAAuB,CAACwB,MAAM,GAAGC,KAAK,QAD5D,mBACtBC,EADsB,KACbC,EADa,OAES3B,EAAqB,mBAAoB,GAFlD,mBAEtB4B,EAFsB,KAETC,EAFS,KAIvBC,EAAgBJ,EAAQE,GACxBG,EAxCV,SAA4BpC,GACxB,IAAMqC,EAAgBrC,EAAQsC,QAAO,SAAAC,GAAC,MAAU,MAANA,KAAWC,OAErD,OADsBxC,EAAQsC,QAAO,SAAAC,GAAC,MAAU,MAANA,KAAWC,SAC5BH,EAAgB,IAAM,IAqC7BI,CAAmBN,GAC/BO,EAnCV,SAAyB1C,GAYrB,IAXA,IAAM2C,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFxC,EAAI,EAAGA,EAAIwC,EAAMH,OAAQrC,IAAK,mBAEjBwC,EAAMxC,GAFW,GAE5ByC,EAF4B,KAEzBC,EAFyB,KAEtBC,EAFsB,KAInC,GAAI9C,EAAQ4C,IAAM5C,EAAQ4C,KAAO5C,EAAQ6C,IAAM7C,EAAQ4C,KAAO5C,EAAQ8C,GAClE,OAAQ9C,EAAQ4C,GAGxB,OAAO,KAeQG,CAAgBZ,GACzBa,EAbV,SAAyBN,EAAQ1C,EAAQoC,GACrC,OAAOM,EAAM,kBAAcA,GACvB1C,EAAQiD,MAAMC,SACV,sBADJ,uBAC4Cd,GAUjCe,CAAgBT,EAAQP,EAAgBC,GAoBvD,IAAMgB,EAAQrB,EAAQsB,KAAI,SAACC,EAAYC,GACnC,IAAMC,EAAcD,EAAI,sBAAkBA,GAAQ,mBAC5CE,EAAgBF,IAAStB,EAE/B,OACI,wBAAI3B,IAAKiD,GACL,4BAAQG,SAAUD,EAAexD,QAAS,kBAAMiC,EAAeqB,KAC1DC,EADL,IACmBC,EAAgB,YAAc,UAM7D,MAAO,CAACT,EA9BR,SAAsBW,GAClB,IAAIjB,IAAUP,EAAewB,GAA7B,CAGA,IAAMC,EAAa7B,EAAQ8B,OAAO,EAAG5B,EAAa,GAC5CjC,EAAO,YAAOmC,GACpBnC,EAAQ2D,GAAUvB,EAClBJ,EAAW,GAAD,mBAAK4B,GAAL,CAAgB5D,KAC1BkC,EAAe0B,EAAWpB,UAsBFL,EAlB5B,WACIH,EAAW,CAACH,MAAM,GAAGC,KAAK,QAC1BI,EAAe,IAgBgCkB,EAAMV,ICtEhDoB,EAAO,WAAO,IAAD,EAC4ClC,IAD5C,mBACfoB,EADe,KACRe,EADQ,KACK5B,EADL,KACoB6B,EADpB,KAC4BZ,EAD5B,KACkCV,EADlC,KAItB,OACI,yBAAKtC,UAAU,QAEX,yBAAKA,UAAU,cACX,kBAAC,EAAD,CAAOH,QAAS8D,EAAc/D,QAASmC,IACvC,yBAAK/B,UAAU,qBACX,4BAAQA,UAAU,UAAUH,QAAS+D,GAChCtB,EAAS,iBAAmB,aAKzC,yBAAKtC,UAAU,aACX,6BAAM4C,GACN,4BAAKI,MCLRa,EAhBW,SAAAC,GAIpB,OAJ8B,YAEnBA,GAGP,oCACA,yBAAKC,MAAO,CAACC,QAAQ,OAAQC,eAAe,WACxC,gCACI,8CAGJ,kBAAC,EAAD,QCDGC,MAVf,WACE,OACE,6BACI,kBAAC,IAAMC,WAAP,KACI,kBAACN,EAAD,SCIQf,QACW,cAA7BlC,OAAOwD,SAASC,UAEe,UAA7BzD,OAAOwD,SAASC,UAEhBzD,OAAOwD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAML,WAAP,KACE,kBAAC,EAAD,OAEFM,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.31969dc8.chunk.js","sourcesContent":["import React from 'react'\r\nimport './style/board-style.css'\r\nexport const Board = ({squares ,onClick}) => {\r\n\r\n    function renderSquare(i){\r\n        return(\r\n            <button className='square' onClick={() =>onClick(i)}>\r\n                {squares[i]}\r\n            </button>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"board-row\">\r\n                {renderSquare(0)}\r\n                {renderSquare(1)}\r\n                {renderSquare(2)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n                {renderSquare(3)}\r\n                {renderSquare(4)}\r\n                {renderSquare(5)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n                {renderSquare(6)}\r\n                {renderSquare(7)}\r\n                {renderSquare(8)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport function useLocalStorageState( key,\r\n                                     defaultValue ='',\r\n                                     {serialize= JSON.stringify,deserialize=JSON.parse} ={}){\r\n\r\n    const [state,setState] = React.useState(() =>{\r\n        const valueInLocalStoarage = window.localStorage.getItem(key)\r\n\r\n        if(valueInLocalStoarage){\r\n            return deserialize(valueInLocalStoarage)\r\n        }\r\n\r\n        return  typeof defaultValue === 'function' ? defaultValue() : defaultValue\r\n    })\r\n\r\n    const prevKeyRef = React.useRef(key)\r\n\r\n    React.useEffect(() =>{\r\n            const prevKey = prevKeyRef.current\r\n        if(prevKey !== key){\r\n            //delete the old value saved into local storage\r\n            window.localStorage.removeItem(prevKey)\r\n        }\r\n        //update ref\r\n        prevKeyRef.current = key\r\n        window.localStorage.setItem(key, serialize(state))\r\n    },[key, state, serialize])\r\n\r\n    return [state, setState]\r\n}\r\n","import {useLocalStorageState} from '../../utils/localStorageState'\r\nimport React from 'react'\r\nfunction calculateNextValue(squares) {\r\n    const xSquaresCount = squares.filter(r => r === 'X').length\r\n    const oSquaresCount = squares.filter(r => r === 'O').length\r\n    return oSquaresCount === xSquaresCount ? 'X' : 'O'\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 1, 2],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ]\r\n    for (let i = 0; i < lines.length; i++) {\r\n        //deconstruct the values of the line at index i\r\n        const [a, b, c] = lines[i]\r\n        //if all values are the same we have a winner\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return  squares[a]\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nfunction calculateStatus(winner, squares,nextValue){\r\n    return winner ? `Winner: ${winner}`:\r\n        squares.every(Boolean) ?\r\n            'Scartch: Cat\\'s game': `Next player: ${nextValue}`\r\n}\r\n\r\nexport const useGameLogic = () =>{\r\n    const [history, setHistory] = useLocalStorageState('tic-tac-toe:history', [Array(9).fill(null)])\r\n    const [currentStep, setCurrentStep] = useLocalStorageState('tic-tac-toe:step', 0)\r\n\r\n    const currentSquares= history[currentStep]\r\n    const nextValue = calculateNextValue(currentSquares)\r\n    const winner = calculateWinner(currentSquares)\r\n    const status = calculateStatus(winner, currentSquares, nextValue)\r\n\r\n\r\n    function selectSquare(square) {\r\n        if (winner || currentSquares[square]) {\r\n            return\r\n        }\r\n        const newHistory = history.splice(0, currentStep +1)\r\n        const squares = [...currentSquares]\r\n        squares[square] = nextValue\r\n        setHistory([...newHistory,squares])\r\n        setCurrentStep(newHistory.length)\r\n\r\n    }\r\n\r\n    function restart() {\r\n        setHistory([Array(9).fill(null)])\r\n        setCurrentStep(0)\r\n    }\r\n\r\n    const moves = history.map((stepSquares,step) =>{\r\n        const description = step ? `Go to move #${step}`: 'Go to game start'\r\n        const isCurrentStep = step === currentStep\r\n\r\n        return (\r\n            <li key={step}>\r\n                <button disabled={isCurrentStep} onClick={() => setCurrentStep(step)}>\r\n                    {description} {isCurrentStep ? '(current)' : null}\r\n                </button>\r\n            </li>\r\n        )\r\n    })\r\n\r\n    return [status,selectSquare,currentSquares,restart,moves,winner]\r\n}\r\n","import React from 'react'\r\nimport './style/game-style.css'\r\nimport {Board} from './Board'\r\nimport {useGameLogic} from './game-logic'\r\n\r\n\r\n\r\nexport const Game = () => {\r\n    const [status,selectSquare,currentSquares,restart,moves,winner] = useGameLogic()\r\n\r\n\r\n    return (\r\n        <div className=\"game\">\r\n\r\n            <div className=\"game-board\">\r\n                <Board onClick={selectSquare} squares={currentSquares}/>\r\n                <div className='restart-container'>\r\n                    <button className=\"restart\" onClick={restart}>\r\n                        {winner ? 'Start new game' : 'Restart'}\r\n                    </button>\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"game-info\">\r\n                <div>{status}</div>\r\n                <ol>{moves}</ol>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Game} from './components/Game'\r\n\r\n\r\nconst GameContainerFC = props => {\r\n\r\n    const {} = props\r\n\r\n    return (\r\n        <>\r\n        <div style={{display:'flex', justifyContent:'center'}}>\r\n            <header >\r\n                <h1 > Tic tac toe</h1>\r\n            </header>\r\n        </div>\r\n            <Game/>\r\n   </>\r\n    )\r\n}\r\n\r\nexport const TicTacToe = GameContainerFC\r\n","import React from 'react';\nimport {TicTacToe} from './game/TicTacToe'\n\n\nfunction App() {\n  return (\n    <div >\n        <React.StrictMode>\n            <TicTacToe/>\n        </React.StrictMode>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}